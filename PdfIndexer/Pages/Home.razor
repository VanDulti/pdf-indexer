@page "/"
@using System.Collections.Immutable
@using System.IO
@using System.Text.RegularExpressions
@using PdfIndexer.Data
@using StopWord
@inject ILogger<Home> Logger
@inject IJSRuntime Js
@inject IPdfReader PdfReader
@inject IPdfWriter PdfWriter

<h1>Pdf Indexer</h1>

<ul class="text-sm-start">
    <li>🔐 Pdfs are processed entirely & exclusively in your browser => your pdfs stay on your machine.</li>
    <li>📚 Only the text is extracted from the pdfs, no images or other content.</li>
    <li>
        <span class="fw-bold">⚠️ Attention: </span>
        PDFs are weird, so the text extraction might not be perfect.
        (In particular, if you know a better pdf library (c#) than iTextSharp that works in the browser, let me know)
    </li>
</ul>

<section>
    <h2>Upload your PDF files</h2>
    <p>Select one or more PDF files to upload and create a word index.</p>
    <fieldset>
        <legend>
            <p>Options</p>
        </legend>
        <p>
            <label>
                <InputCheckbox @bind-Value="IgnoreInsignificant" DisplayName="Ignore insignificant words" class="align-middle"/>
                Ignore insignificant words
            </label>
        </p>
        <hr/>
        <p>
            <label>
                <InputCheckbox @bind-Value="RemoveLanguageCodes" DisplayName="Remove Language Codes" class="align-middle"/>
                <span title="Excluded: @(string.Join(", ", IsoLanguageCodes))">
                    Some PDFs include weird metadata like language codes in the parsed text. Enabling this option will remove
                    most of these codes. This is a bit of a trade-off, as you might lose some words that are actually part 
                    of the text (especially abbreviations like language codes in the text itself).
                </span>
            </label>
        </p>
        <hr/>
        <p>
            <label>
                <InputCheckbox @bind-Value="RemoveLanguageCodes" DisplayName="Remove Language Codes" class="align-middle"/>
                <span title="Excluded: @(string.Join(", ", IsoLanguageCodes))">
                    Some PDFs contain weird metadata in the text, like language codes. Enabling this option will remove
                    most of these codes from the text. This is a bit of a trade-off, as you might lose some words that are
                    actually part of the text (especially abbreviations like language codes in the text itself).
                </span>
            </label>
        </p>
        <hr/>
        <p>
            <label class="d-inline text-light">
                <p>Regex for words</p>
                <InputText @bind-Value="WordExpressionInput" DisplayName="Word regex" Placeholder="[a-zA-ZäöüÄÖÜß]{3,}" HelpText="Default: [a-zA-ZäöüÄÖÜß]{3,}"/>
            </label>
        </p>
        <hr/>
        <p>
            <InputFile OnChange="AddFiles" multiple class="w-100" accept=".pdf"/>
        </p>
    </fieldset>
</section>
@if (_wordIndices.Any())
{
    <fieldset>
        <legend>
            <p>Generated Word Indices</p>
        </legend>
        <button @onclick="DownloadPdfCombined">Combined Pdf</button>
        <button @onclick="DownloadPdfIndicesMerged">Pdf with a single total index</button>
        @foreach (var (file, wordIndex) in _wordIndices)
        {
            <details>
                <summary>
                    @file.Name
                </summary>
                <section>
                    <h4>Download</h4>
                    <p class="text-center">
                        <button @onclick="() => DownloadIndex(file)" class="d-inline">PDF</button>
                        <button @onclick="() => DownloadAppended(file)" class="d-inline">Total PDF</button>
                        <button @onclick="() => DownloadIndexTxt(file)" class="d-inline">.txt</button>
                        <button @onclick="() => DownloadIndexJson(file)" class="d-inline">.json</button>
                        <button @onclick="() => RemoveFile(file)" class="d-inline">Remove</button>
                    </p>
                </section>
                <section>
                    <h4>View</h4>
                    <WordIndexGrid Value="wordIndex"/>
                </section>
            </details>
        }
    </fieldset>
}

@if (_isLoading)
{
    <div>Loading...</div>
}

@code {
    private readonly IDictionary<IBrowserFile, WordIndex> _wordIndices = new Dictionary<IBrowserFile, WordIndex>();
    private bool _isLoading;

    public string? WordExpressionInput { get; set; }

    private string WordExpression => string.IsNullOrEmpty(WordExpressionInput) ? "[a-zA-ZäöüÄÖÜß]{3,}" : WordExpressionInput;

    private Regex WordRegex => new(WordExpression, RegexOptions.Compiled | RegexOptions.CultureInvariant);

    public bool IgnoreInsignificant { get; set; } = true;

    public bool RemoveLanguageCodes { get; set; } = false;

    private static string[] IsoLanguageCodes { get; } =
    [
        "AF", "AX", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ",
        "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW", "BV", "BR",
        "IO", "BN", "BG", "BF", "BI", "CV", "KH", "CM", "CA", "KY", "CF", "TD", "CL", "CN", "CX", "CC",
        "CO", "KM", "CD", "CG", "CK", "CR", "CI", "HR", "CU", "CW", "CY", "CZ", "DK", "DJ", "DM", "DO",
        "EC", "EG", "SV", "GQ", "ER", "EE", "SZ", "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF",
        "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG", "GN", "GW", "GY",
        "HT", "HM", "VA", "HN", "HK", "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL", "IT", "JM",
        "JP", "JE", "JO", "KZ", "KE", "KI", "KP", "KR", "KW", "KG", "LA", "LV", "LB", "LS", "LR", "LY",
        "LI", "LT", "LU", "MO", "MK", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ", "MR", "MU", "YT",
        "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR", "NP", "NL", "NC", "NZ",
        "NI", "NE", "NG", "NU", "NF", "MP", "NO", "OM", "PK", "PW", "PS", "PA", "PG", "PY", "PE", "PH",
        "PN", "PL", "PT", "PR", "QA", "RE", "RO", "RU", "RW", "BL", "SH", "KN", "LC", "MF", "PM", "VC",
        "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG", "SX", "SK", "SI", "SB", "SO", "ZA", "GS",
        "SS", "ES", "LK", "SD", "SR", "SJ", "SE", "CH", "SY", "TW", "TJ", "TZ", "TH", "TL", "TG", "TK",
        "TO", "TT", "TN", "TR", "TM", "TC", "TV", "UG", "UA", "AE", "GB", "US", "UM", "UY", "UZ", "VU",
        "VE", "VN", "VG", "VI", "WF", "EH", "YE", "ZM", "ZW"
    ];

    private async Task InvokeDownload(Stream stream, string fileName)
    {
        using var streamRef = new DotNetStreamReference(stream: stream, leaveOpen: false);
        await Js.InvokeVoidAsync("Home.downloadFileFromStream", fileName, streamRef);
    }

    private void RemoveFile(IBrowserFile file)
    {
        _wordIndices.Remove(file);
    }

    private async Task AddFiles(InputFileChangeEventArgs e)
    {
        try
        {
            _isLoading = true;
            foreach (var browserFile in e.GetMultipleFiles(int.MaxValue))
            {
                try
                {
                    // TODO: parallelize all the awaits in this loop
                    var inMemoryFile = await InMemoryFile.CopyOf(browserFile);
                    _wordIndices[inMemoryFile] = await GenerateWordIndex(inMemoryFile);
                }
                catch (Exception ex)
                {
                    Logger.LogError("File: {FileName} Error: {Error}",
                        browserFile.Name, ex.Message);
                }
            }
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task<WordIndex> GenerateWordIndex(IBrowserFile file)
    {
        await using var fileStream = file.OpenReadStream();
        var result = new WordIndex();
        var stopWordsEn = StopWords.GetStopWords("en");
        var stopWords = StopWords.GetStopWords()
            .Concat(stopWordsEn)
            .ToImmutableHashSet();
        try
        {
            var pages = PdfReader.Read(fileStream);
            foreach (var (pageNumber, text) in pages)
            {
                var mutableText = text;
                if (RemoveLanguageCodes)
                {
                    mutableText = ReplaceLanguageCodes(text);
                }

                var words = WordRegex
                    .Matches(mutableText)
                    .Select(match => match.Value);

                if (IgnoreInsignificant)
                {
                    words = words.Where(word => !stopWords.Contains(word));
                }

                result.Add(pageNumber, words);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }

        return result;
    }

    /// <summary>
    /// This method removes all language codes from the text. ITextSharp often includes weird metadata in the parsed text,
    /// most of which being language codes. This is of course a trade-off, as we might lose some words that are actually
    /// part of the text (especially abbreviations like language codes in the text itself).
    ///  
    /// </summary>
    /// <param name="text">The text to remove the language codes from</param>
    /// <returns>The text without language codes</returns>
    private static string ReplaceLanguageCodes(string text)
    {
        foreach (var isoLanguageCode in IsoLanguageCodes)
        {
            text = text.Replace(isoLanguageCode, "");
        }

        return text;
    }

    private async Task DownloadAppended(IBrowserFile file)
    {
        using var stream = new MemoryStream();
        await PdfWriter.WriteOriginalWithIndex(stream, file.OpenReadStream(), _wordIndices[file]);
        stream.Seek(0, SeekOrigin.Begin);
        var newFileName = Path.GetFileNameWithoutExtension(file.Name) + "-with-index.pdf";
        await InvokeDownload(stream, newFileName);
    }

    private async Task DownloadIndex(IBrowserFile file)
    {
        try
        {
            _isLoading = true;
            using var stream = new MemoryStream();
            await PdfWriter.WriteIndex(stream, _wordIndices[file]);
            stream.Seek(0, SeekOrigin.Begin);
            var newFileName = Path.GetFileNameWithoutExtension(file.Name) + "-index.pdf";
            await InvokeDownload(stream, newFileName);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task DownloadIndexTxt(IBrowserFile file)
    {
        var entries = _wordIndices[file]
            .Index
            .Select(pair => $"{pair.Key}: {string.Join(", ", pair.Value)}");
        var stream = new MemoryStream();
        var writer = new StreamWriter(stream, leaveOpen: true);
        foreach (var entry in entries)
        {
            await writer.WriteLineAsync(entry);
        }

        await writer.DisposeAsync();
        stream.Seek(0, SeekOrigin.Begin);
        var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(file.Name);
        var fileName = $"{fileNameWithoutExtension}-index.txt";
        await InvokeDownload(stream, fileName);
    }

    private async Task DownloadIndexJson(IBrowserFile file)
    {
        var wordIndex = _wordIndices[file];
        var stream = new MemoryStream();
        await wordIndex.SerializeJson(stream);
        stream.Seek(0, SeekOrigin.Begin);
        var newFileName = Path.GetFileNameWithoutExtension(file.Name) + "-index.json";
        await InvokeDownload(stream, newFileName);
    }

    private async void DownloadPdfCombined()
    {
        using var stream = new MemoryStream();
        var indices = _wordIndices
            .Select(p => (p.Key.OpenReadStream(), p.Value));
        await PdfWriter.WriteCombined(stream, indices);
        stream.Seek(0, SeekOrigin.Begin);
        const string newFileName = "combined.pdf";
        await InvokeDownload(stream, newFileName);
    }

    private async void DownloadPdfIndicesMerged()
    {
        using var stream = new MemoryStream();
        var indices = _wordIndices
            .Select(p => (p.Key.OpenReadStream(), p.Value));
        await PdfWriter.WriteMerged(stream, indices);
        stream.Seek(0, SeekOrigin.Begin);
        const string newFileName = "merged-index.pdf";
        await InvokeDownload(stream, newFileName);
    }

}